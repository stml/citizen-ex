/*
 * DO NOT EDIT THIS FILE
 *
 * It will be automatically generated from
 * templates defines in ./gulpfile.js
 * any time the templates are updated
 *
 */

var CxBrowser = function() {
  this.name = 'unknown';
  var notChrome = _.isUndefined(window.chrome);
  if (!notChrome) {
    this.name = 'chrome';
  } else {
    this.name = 'safari';
  }
};

CxBrowser.prototype.chrome = function() {
  return this.name === 'chrome';
};

CxBrowser.prototype.safari = function() {
  return this.name === 'safari';
};

var CxStorage = function(browser) {
  this.browser = browser;
};

CxStorage.prototype.set = function(property, value) {
  if (!property) {
    return;
  }

  var json = JSON.prune(value);
  if (this.browser.chrome()) {
    var obj = {};
    obj[property] = json;
    chrome.storage.local.set(obj);
  } else if (this.browser.safari()) {
    localStorage[property] = json;
  } else {
    throw 'Unknown browser';
  }
};

CxStorage.prototype.get = function(property, callback) {
  if (this.browser.chrome()) {
    chrome.storage.local.get(property, function(result) {
      var data = undefined;
      if (result[property]) {
        data = JSON.parse(result[property]);
        callback(data);
      }
    });
  } else if (this.browser.safari()) {
    var data = undefined;
    if (localStorage[property]) {
      var data = JSON.parse(localStorage[property]);
    }
    callback(data);
  } else {
    throw 'Unknown browser';
  }
};

CxStorage.prototype.clear = function() {
  if (this.browser.chrome()) {
    chrome.storage.local.clear();
  } else if (this.browser.safari()) {
    localStorage.clear();
  } else {
    throw 'Unknown browser';
  }
};

var CxMessage = function(browser) {
  this.browser = browser;
};

CxMessage.prototype.send = function(message) {
  if (this.browser.chrome()) {
    chrome.runtime.sendMessage(message);
  } else if (this.browser.safari()) {

    var key;

    _.each(message, function (v, k) {
      if (v) {
        key = k;
      }
    });
    safari.self.tab.dispatchMessage(key, message, false);
  } else {
    throw 'Unknown browser';
  }
};


// shared/js/log_entry.js

var LogEntry = function() {};

LogEntry.prototype.fromJSON = function(json) {
  var that = this;
  _.each(json, function(value, key) {
    that[key] = value;
  });
  return this;
};

LogEntry.prototype.latestTimestamp = function() {
  return _.max(this.timestamps, function(timestamp) {
    return Date.parse(timestamp).value;
  });
};

;(function(){

/**
 * Require the given path.
 *
 * @param {String} path
 * @return {Object} exports
 * @api public
 */

function require(path, parent, orig) {
  var resolved = require.resolve(path);

  // lookup failed
  if (null == resolved) {
    orig = orig || path;
    parent = parent || 'root';
    var err = new Error('Failed to require "' + orig + '" from "' + parent + '"');
    err.path = orig;
    err.parent = parent;
    err.require = true;
    throw err;
  }

  var module = require.modules[resolved];

  // perform real require()
  // by invoking the module's
  // registered function
  if (!module.exports) {
    module.exports = {};
    module.client = module.component = true;
    module.call(this, module.exports, require.relative(resolved), module);
  }

  return module.exports;
}

/**
 * Registered modules.
 */

require.modules = {};

/**
 * Registered aliases.
 */

require.aliases = {};

/**
 * Resolve `path`.
 *
 * Lookup:
 *
 *   - PATH/index.js
 *   - PATH.js
 *   - PATH
 *
 * @param {String} path
 * @return {String} path or null
 * @api private
 */

require.resolve = function(path) {
  if (path.charAt(0) === '/') path = path.slice(1);

  var paths = [
    path,
    path + '.js',
    path + '.json',
    path + '/index.js',
    path + '/index.json'
  ];

  for (var i = 0; i < paths.length; i++) {
    var path = paths[i];
    if (require.modules.hasOwnProperty(path)) return path;
    if (require.aliases.hasOwnProperty(path)) return require.aliases[path];
  }
};

/**
 * Normalize `path` relative to the current path.
 *
 * @param {String} curr
 * @param {String} path
 * @return {String}
 * @api private
 */

require.normalize = function(curr, path) {
  var segs = [];

  if ('.' != path.charAt(0)) return path;

  curr = curr.split('/');
  path = path.split('/');

  for (var i = 0; i < path.length; ++i) {
    if ('..' == path[i]) {
      curr.pop();
    } else if ('.' != path[i] && '' != path[i]) {
      segs.push(path[i]);
    }
  }

  return curr.concat(segs).join('/');
};

/**
 * Register module at `path` with callback `definition`.
 *
 * @param {String} path
 * @param {Function} definition
 * @api private
 */

require.register = function(path, definition) {
  require.modules[path] = definition;
};

/**
 * Alias a module definition.
 *
 * @param {String} from
 * @param {String} to
 * @api private
 */

require.alias = function(from, to) {
  if (!require.modules.hasOwnProperty(from)) {
    throw new Error('Failed to alias "' + from + '", it does not exist');
  }
  require.aliases[to] = from;
};

/**
 * Return a require function relative to the `parent` path.
 *
 * @param {String} parent
 * @return {Function}
 * @api private
 */

require.relative = function(parent) {
  var p = require.normalize(parent, '..');

  /**
   * lastIndexOf helper.
   */

  function lastIndexOf(arr, obj) {
    var i = arr.length;
    while (i--) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  /**
   * The relative require() itself.
   */

  function localRequire(path) {
    var resolved = localRequire.resolve(path);
    return require(resolved, parent, path);
  }

  /**
   * Resolve relative to the parent.
   */

  localRequire.resolve = function(path) {
    var c = path.charAt(0);
    if ('/' == c) return path.slice(1);
    if ('.' == c) return require.normalize(p, path);

    // resolve deps by returning
    // the dep in the nearest "deps"
    // directory
    var segs = parent.split('/');
    var i = lastIndexOf(segs, 'deps') + 1;
    if (!i) i = 0;
    path = segs.slice(0, i + 1).join('/') + '/deps/' + path;
    return path;
  };

  /**
   * Check if module is defined at `path`.
   */

  localRequire.exists = function(path) {
    return require.modules.hasOwnProperty(localRequire.resolve(path));
  };

  return localRequire;
};
require.register("calvinmetcalf-setImmediate/lib/index.js", function(exports, require, module){
"use strict";
var types = [
    require("./nextTick"),
    require("./mutation"),
    require("./postMessage"),
    require("./messageChannel"),
    require("./stateChange"),
    require("./timeout")
];
var handlerQueue = [];

function drainQueue() {
    var i = 0,
        task,
        innerQueue = handlerQueue;
	handlerQueue = [];
	/*jslint boss: true */
	while (task = innerQueue[i++]) {
		task();
	}
}
var nextTick;
types.some(function (obj) {
    var t = obj.test();
    if (t) {
        nextTick = obj.install(drainQueue);
    }
    return t;
});
var retFunc = function (task) {
    var len, args;
    if (arguments.length > 1 && typeof task === "function") {
        args = Array.prototype.slice.call(arguments, 1);
        args.unshift(undefined);
        task = task.bind.apply(task, args);
    }
    if ((len = handlerQueue.push(task)) === 1) {
        nextTick(drainQueue);
    }
    return len;
};
retFunc.clear = function (n) {
    if (n <= handlerQueue.length) {
        handlerQueue[n - 1] = function () {};
    }
    return this;
};
module.exports = retFunc;

});
require.register("calvinmetcalf-setImmediate/lib/nextTick.js", function(exports, require, module){
"use strict";
exports.test = function () {
    // Don't get fooled by e.g. browserify environments.
    return typeof process === "object" && Object.prototype.toString.call(process) === "[object process]";
};

exports.install = function () {
    return process.nextTick;
};
});
require.register("calvinmetcalf-setImmediate/lib/postMessage.js", function(exports, require, module){
"use strict";
var globe = require("./global");
exports.test = function () {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can"t be used for this purpose.

    if (!globe.postMessage || globe.importScripts) {
        return false;
    }

    var postMessageIsAsynchronous = true;
    var oldOnMessage = globe.onmessage;
    globe.onmessage = function () {
        postMessageIsAsynchronous = false;
    };
    globe.postMessage("", "*");
    globe.onmessage = oldOnMessage;

    return postMessageIsAsynchronous;
};

exports.install = function (func) {
    var codeWord = "com.calvinmetcalf.setImmediate" + Math.random();
    function globalMessage(event) {
        if (event.source === globe && event.data === codeWord) {
            func();
        }
    }
    if (globe.addEventListener) {
        globe.addEventListener("message", globalMessage, false);
    } else {
        globe.attachEvent("onmessage", globalMessage);
    }
    return function () {
        globe.postMessage(codeWord, "*");
    };
};
});
require.register("calvinmetcalf-setImmediate/lib/messageChannel.js", function(exports, require, module){
"use strict";
var globe = require("./global");
exports.test = function () {
    return !!globe.MessageChannel;
};

exports.install = function (func) {
    var channel = new globe.MessageChannel();
    channel.port1.onmessage = func;
    return function () {
        channel.port2.postMessage(0);
    };
};
});
require.register("calvinmetcalf-setImmediate/lib/stateChange.js", function(exports, require, module){
"use strict";
var globe = require("./global");
exports.test = function () {
    return "document" in globe && "onreadystatechange" in globe.document.createElement("script");
};

exports.install = function (handle) {
    return function () {

        // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
        // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
        var scriptEl = globe.document.createElement("script");
        scriptEl.onreadystatechange = function () {
            handle();

            scriptEl.onreadystatechange = null;
            scriptEl.parentNode.removeChild(scriptEl);
            scriptEl = null;
        };
        globe.document.documentElement.appendChild(scriptEl);

        return handle;
    };
};
});
require.register("calvinmetcalf-setImmediate/lib/timeout.js", function(exports, require, module){
"use strict";
exports.test = function () {
    return true;
};

exports.install = function (t) {
    return function () {
        setTimeout(t, 0);
    };
};
});
require.register("calvinmetcalf-setImmediate/lib/global.js", function(exports, require, module){
module.exports = typeof global === "object" && global ? global : this;
});
require.register("calvinmetcalf-setImmediate/lib/mutation.js", function(exports, require, module){
"use strict";
//based off rsvp
//https://github.com/tildeio/rsvp.js/blob/master/lib/rsvp/async.js
var globe = require("./global");

var MutationObserver = globe.MutationObserver || globe.WebKitMutationObserver;

exports.test = function () {
    return MutationObserver;
};

exports.install = function (handle) {
    var observer = new MutationObserver(handle);
    var element = globe.document.createElement("div");
    observer.observe(element, { attributes: true });

    // Chrome Memory Leak: https://bugs.webkit.org/show_bug.cgi?id=93661
    globe.addEventListener("unload", function () {
        observer.disconnect();
        observer = null;
    }, false);
    return function () {
        element.setAttribute("drainQueue", "drainQueue");
    };
};
});
require.register("lie/lie.js", function(exports, require, module){
var immediate = require('immediate');
// Creates a deferred: an object with a promise and corresponding resolve/reject methods
function Promise(resolver) {
     if (!(this instanceof Promise)) {
        return new Promise(resolver);
    }
    var queue = [];
    var resolved = false;
    // The `handler` variable points to the function that will
    // 1) handle a .then(onFulfilled, onRejected) call
    // 2) handle a .resolve or .reject call (if not fulfilled)
    // Before 2), `handler` holds a queue of callbacks.
    // After 2), `handler` is a simple .then handler.
    // We use only one function to save memory and complexity.
     // Case 1) handle a .then(onFulfilled, onRejected) call
    function pending(onFulfilled, onRejected){
        return Promise(function(resolver,rejecter){
            queue.push({
                resolve: onFulfilled,
                reject: onRejected,
                resolver:resolver,
                rejecter:rejecter
            });
        });
    }
    function then(onFulfilled, onRejected) {
        return resolved?resolved(onFulfilled, onRejected):pending(onFulfilled, onRejected);
    }
    // Case 2) handle a .resolve or .reject call
        // (`onFulfilled` acts as a sentinel)
        // The actual function signature is
        // .re[ject|solve](sentinel, success, value)
    function resolve(success, value){
        var action = success ? 'resolve' : 'reject';
        var queued;
        var callback;
        for (var i = 0, l = queue.length; i < l; i++) {
            queued = queue[i];
            callback = queued[action];
            if (typeof callback === 'function') {
                immediate(execute,callback, value, queued.resolver, queued.rejecter);
            }else if(success){
                queued.resolver(value);
            }else{
                queued.rejecter(value);
            }
        }
        // Replace this handler with a simple resolved or rejected handler
        resolved = createHandler(then, value, success);
    }
    this.then = then;
    function yes(value) {
        if (!resolved) {
            resolve(true, value);
        }
    }
    function no (reason) {
        if (!resolved) {
            resolve(false, reason);
        }
    }
    try{
        resolver(function(a){
            if(a && typeof a.then==='function'){
                a.then(yes,no);
            }else{
                yes(a);
            }
        },no);
    }catch(e){
        no(e);
    }
}

// Creates a fulfilled or rejected .then function
function createHandler(then, value, success) {
    return function(onFulfilled, onRejected) {
        var callback = success ? onFulfilled : onRejected;
        if (typeof callback !== 'function') {
            return Promise(function(resolve,reject){
                then(resolve,reject);
            });
        }
        return Promise(function(resolve,reject){
            immediate(execute,callback,value,resolve,reject);
       });
    };
}

// Executes the callback with the specified value,
// resolving or rejecting the deferred
function execute(callback, value, resolve, reject) {
        try {
            var result = callback(value);
            if (result && typeof result.then === 'function') {
                result.then(resolve, reject);
            }
            else {
                resolve(result);
            }
        }
        catch (error) {
            reject(error);
        }
}
module.exports = Promise;

});
require.alias("calvinmetcalf-setImmediate/lib/index.js", "lie/deps/immediate/lib/index.js");
require.alias("calvinmetcalf-setImmediate/lib/nextTick.js", "lie/deps/immediate/lib/nextTick.js");
require.alias("calvinmetcalf-setImmediate/lib/postMessage.js", "lie/deps/immediate/lib/postMessage.js");
require.alias("calvinmetcalf-setImmediate/lib/messageChannel.js", "lie/deps/immediate/lib/messageChannel.js");
require.alias("calvinmetcalf-setImmediate/lib/stateChange.js", "lie/deps/immediate/lib/stateChange.js");
require.alias("calvinmetcalf-setImmediate/lib/timeout.js", "lie/deps/immediate/lib/timeout.js");
require.alias("calvinmetcalf-setImmediate/lib/global.js", "lie/deps/immediate/lib/global.js");
require.alias("calvinmetcalf-setImmediate/lib/mutation.js", "lie/deps/immediate/lib/mutation.js");
require.alias("calvinmetcalf-setImmediate/lib/index.js", "lie/deps/immediate/index.js");
require.alias("calvinmetcalf-setImmediate/lib/index.js", "immediate/index.js");
require.alias("calvinmetcalf-setImmediate/lib/index.js", "calvinmetcalf-setImmediate/index.js");

require.alias("lie/lie.js", "lie/index.js");

L.Util.Promise = require("lie");
})();

L.Util.ajax = function(url, options) {
	'use strict';
	options = options || {};
	if (options.jsonp) {
		return L.Util.ajax.jsonp(url, options);
	}
	var request;
	var cancel;
	var out = L.Util.Promise(function(resolve,reject){
		var Ajax;
		cancel=reject;
		// the following is from JavaScript: The Definitive Guide
		if (window.XMLHttpRequest === undefined) {
			Ajax = function() {
				try {
					return new ActiveXObject('Microsoft.XMLHTTP.6.0');
				}
				catch (e1) {
					try {
						return new ActiveXObject('Microsoft.XMLHTTP.3.0');
					}
					catch (e2) {
						reject('XMLHttpRequest is not supported');
					}
				}
			};
		}
		else {
			Ajax = window.XMLHttpRequest;
		}
		var response;
		request = new Ajax();
		request.open('GET', url);
		request.onreadystatechange = function() {
			/*jslint evil: true */
			if (request.readyState === 4) {
				if((request.status < 400&&options.local)|| request.status===200) {
					if (window.JSON) {
						response = JSON.parse(request.responseText);
					} else if (options.evil) {
						response = eval('(' + request.responseText + ')');
					}
					resolve(response);
				} else {
					if(!request.status){
						reject('Attempted cross origin request without CORS enabled');
					}else{
						reject(request.statusText);
					}
				}
			}
		};
		request.send();
	});
	out.then(null,function(reason){
		request.abort();
		return reason;
	});
	out.abort = cancel;
	return out;
};

L.Util.jsonp = function(url, options) {
	options = options || {};
	var head = document.getElementsByTagName('head')[0];
	var scriptNode = L.DomUtil.create('script', '', head);
	var cbName, ourl, cbSuffix, cancel;
	var out = L.Util.Promise(function(resolve, reject){
		cancel=reject;
		var cbParam = options.cbParam || 'callback';
		if (options.callbackName) {
			cbName = options.callbackName;
		}
		else {
			cbSuffix = '_' + ('' + Math.random()).slice(2);
			cbName = 'L.Util.jsonp.cb.' + cbSuffix;
		}
		scriptNode.type = 'text/javascript';
		if (cbSuffix) {
			L.Util.jsonp.cb[cbSuffix] = function(data) {
				head.removeChild(scriptNode);
				delete L.Util.jsonp.cb[cbSuffix];
				resolve(data);
			};
		}
		if (url.indexOf('?') === -1) {
			ourl = url + '?' + cbParam + '=' + cbName;
		}
		else {
			ourl = url + '&' + cbParam + '=' + cbName;
		}
		scriptNode.src = ourl;
	}).then(null,function(reason){
	    head.removeChild(scriptNode);
		delete L.Util.ajax.cb[cbSuffix];
		return reason;
	});
	out.abort = cancel;
	return out;
};
L.Util.jsonp.cb = {};

L.GeoJSON.AJAX = L.GeoJSON.extend({
	defaultAJAXparams: {
		dataType: 'json',
		callbackParam: 'callback',
		local:false,
		middleware: function(f) {
			return f;
		}
	},
	initialize: function(url, options) {

		this.urls = [];
		if (url) {
			if (typeof url === 'string') {
				this.urls.push(url);
			}
			else if (typeof url.pop === 'function') {
				this.urls = this.urls.concat(url);
			}
			else {
				options = url;
				url = undefined;
			}
		}
		var ajaxParams = L.Util.extend({}, this.defaultAJAXparams);

		for (var i in options) {
			if (this.defaultAJAXparams.hasOwnProperty(i)) {
				ajaxParams[i] = options[i];
			}
		}
		this.ajaxParams = ajaxParams;
		this._layers = {};
		L.Util.setOptions(this, options);
		this.on('data:loaded', function() {
			if (this.filter) {
				this.refilter(this.filter);
			}
		}, this);
		var self = this;
		if (this.urls.length > 0) {
			L.Util.Promise(function(yes){
			    yes();
			}).then(function(){
			    self.addUrl();
		    });
		}
	},
	clearLayers: function() {
		this.urls = [];
		L.GeoJSON.prototype.clearLayers.call(this);
		return this;
	},
	addUrl: function(url) {
		var self = this;
		if (url) {
			if (typeof url === 'string') {
				self.urls.push(url);
			}
			else if (typeof url.pop === 'function') {
				self.urls = self.urls.concat(url);
			}
		}
		var loading = self.urls.length;
		var done = 0;
		self.fire('data:loading');
		self.urls.forEach(function(url) {
			if (self.ajaxParams.dataType.toLowerCase() === 'json') {
				L.Util.ajax(url,self.ajaxParams).then(function(d) {
					var data = self.ajaxParams.middleware(d);
					self.addData(data);
					self.fire('data:progress',data);
				},function(err){
					self.fire('data:progress',{error:err});
				});
			}
			else if (self.ajaxParams.dataType.toLowerCase() === 'jsonp') {
				L.Util.jsonp(url,self.ajaxParams).then(function(d) {
					var data = self.ajaxParams.middleware(d);
					self.addData(data);
					self.fire('data:progress',data);
				},function(err){
					self.fire('data:progress',{error:err});
				});
			}
		});
		self.on('data:progress', function() {
			if (++done === loading) {
				self.fire('data:loaded');
			}
		});
	},
	refresh: function(url) {
		url = url || this.urls;
		this.clearLayers();
		this.addUrl(url);
	},
	refilter: function(func) {
		if (typeof func !== 'function') {
			this.filter = false;
			this.eachLayer(function(a) {
				a.setStyle({
					stroke: true,
					clickable: true
				});
			});
		}
		else {
			this.filter = func;
			this.eachLayer(function(a) {

				if (func(a.feature)) {
					a.setStyle({
						stroke: true,
						clickable: true
					});
				}
				else {
					a.setStyle({
						stroke: false,
						clickable: false
					});
				}
			});
		}
	}
});
L.geoJson.ajax = function(geojson, options) {
	return new L.GeoJSON.AJAX(geojson, options);
};

// shared/js/cx_extension.js

var CxExtension = Backbone.Model.extend({
  initialize: function(browser) {
    this.browser = browser;

    this.resetValues();
    this.requestOwnGeoData();
    this.requestLogEntries();
    this.requestCitizenship();
  },

  requestCitizenship: function() {
    message.send({ countryLog: true });
  },

  requestLogEntries: function() {
    message.send({ allLogEntries: true });
  },

  requestOwnGeoData: function() {
    message.send({ ownGeoData: true });
  },

  receiveCitizenship: function(countryLog) {
    var countryCodes = _.pick(countryLog.visits, _.identity);
    var citizenship = this.calculatePercentages(countryCodes);
    this.set({ citizenship: citizenship });
  },

  receiveAllLogEntries: function(entries) {
    var logEntries = _.map(entries, function(entry) {
      var logEntry = new LogEntry();
      return logEntry.fromJSON(entry);
    });

    if (!logEntries) {
      this.set({ logEntries: '' });
    } else {
      this.set({ logEntries: logEntries });
    }
  },

  receiveOwnGeoData: function(ownGeoData) {
    this.set({ ownGeoData: ownGeoData });
  },

  getLogEntryForUrl: function(url) {
    var logEntries = this.get('logEntries');

    if (!logEntries) {
      return null;
    }

    var entries = _.filter(logEntries, function(logEntry) {
      return logEntry.url === url;
    });
    latestEntry = _.max(entries, function(entry) {
      return _.max(entry.timestamps);
    });
    return latestEntry;
  },

  calculatePercentages: function(data) {
    var sum = _.reduce(data, function(memo, num) { return memo + num; }, 0);
    var result = [];
    _.each(data, function(value, key) {
      var percentage = (value / sum) * 100;
      percentage = percentage.toFixed(2);
      result.push({ code: key, percentage: percentage });
    });
    result = _.sortBy(result, 'percentage');

    return result.reverse();
  },

  getPropertiesFromEntries: function(entries, property) {
    var validEntries = _.reject(entries, function(entry) {
      return entry[property] === undefined || entry[property] === '';
    });
    var countryCodes = _.countBy(validEntries, function(entry) {
      return entry[property];
    });
    return countryCodes;
  },


  resetValues: function() {
    this.unset('logEntries');
    this.set({ citizenship: [] });
    this.set({ ownGeoData: '' });
  },

  eraseData: function() {
    this.resetValues();
    storage.clear();
  },

  convertIsoCode: function(countrycode) {
	if (countrycode == 'AF') { return 'AFG'; }
	if (countrycode == 'AX') { return 'ALA'; }
	if (countrycode == 'AL') { return 'ALB'; }
	if (countrycode == 'DZ') { return 'DZA'; }
	if (countrycode == 'AS') { return 'ASM'; }
	if (countrycode == 'AD') { return 'AND'; }
	if (countrycode == 'AO') { return 'AGO'; }
	if (countrycode == 'AI') { return 'AIA'; }
	if (countrycode == 'AG') { return 'ATG'; }
	if (countrycode == 'AR') { return 'ARG'; }
	if (countrycode == 'AM') { return 'ARM'; }
	if (countrycode == 'AW') { return 'ABW'; }
	if (countrycode == 'AU') { return 'AUS'; }
	if (countrycode == 'AT') { return 'AUT'; }
	if (countrycode == 'AZ') { return 'AZE'; }
	if (countrycode == 'BS') { return 'BHS'; }
	if (countrycode == 'BH') { return 'BHR'; }
	if (countrycode == 'BD') { return 'BGD'; }
	if (countrycode == 'BB') { return 'BRB'; }
	if (countrycode == 'BY') { return 'BLR'; }
	if (countrycode == 'BE') { return 'BEL'; }
	if (countrycode == 'BZ') { return 'BLZ'; }
	if (countrycode == 'BJ') { return 'BEN'; }
	if (countrycode == 'BM') { return 'BMU'; }
	if (countrycode == 'BT') { return 'BTN'; }
	if (countrycode == 'BO') { return 'BOL'; }
	if (countrycode == 'BQ') { return 'BES'; }
	if (countrycode == 'BA') { return 'BIH'; }
	if (countrycode == 'BW') { return 'BWA'; }
	if (countrycode == 'BR') { return 'BRA'; }
	if (countrycode == 'IO') { return 'IOT'; }
	if (countrycode == 'VG') { return 'VGB'; }
	if (countrycode == 'BN') { return 'BRN'; }
	if (countrycode == 'BG') { return 'BGR'; }
	if (countrycode == 'BF') { return 'BFA'; }
	if (countrycode == 'BI') { return 'BDI'; }
	if (countrycode == 'KH') { return 'KHM'; }
	if (countrycode == 'CM') { return 'CMR'; }
	if (countrycode == 'CA') { return 'CAN'; }
	if (countrycode == 'CV') { return 'CPV'; }
	if (countrycode == 'KY') { return 'CYM'; }
	if (countrycode == 'CF') { return 'CAF'; }
	if (countrycode == 'TD') { return 'TCD'; }
	if (countrycode == 'CL') { return 'CHL'; }
	if (countrycode == 'CN') { return 'CHN'; }
	if (countrycode == 'CX') { return 'CXR'; }
	if (countrycode == 'CC') { return 'CCK'; }
	if (countrycode == 'CO') { return 'COL'; }
	if (countrycode == 'KM') { return 'COM'; }
	if (countrycode == 'CG') { return 'COG'; }
	if (countrycode == 'CD') { return 'ZAR'; }
	if (countrycode == 'CK') { return 'COK'; }
	if (countrycode == 'CR') { return 'CRI'; }
	if (countrycode == 'HR') { return 'HRV'; }
	if (countrycode == 'CU') { return 'CUB'; }
	if (countrycode == 'CW') { return 'CUW'; }
	if (countrycode == 'CY') { return 'CYP'; }
	if (countrycode == 'CZ') { return 'CZE'; }
	if (countrycode == 'DK') { return 'DNK'; }
	if (countrycode == 'DJ') { return 'DJI'; }
	if (countrycode == 'DM') { return 'DMA'; }
	if (countrycode == 'DO') { return 'DOM'; }
	if (countrycode == 'TL') { return 'TLS'; }
	if (countrycode == 'EC') { return 'ECU'; }
	if (countrycode == 'EG') { return 'EGY'; }
	if (countrycode == 'SV') { return 'SLV'; }
	if (countrycode == 'GQ') { return 'GNQ'; }
	if (countrycode == 'ER') { return 'ERI'; }
	if (countrycode == 'EE') { return 'EST'; }
	if (countrycode == 'ET') { return 'ETH'; }
	if (countrycode == 'FO') { return 'FRO'; }
	if (countrycode == 'FK') { return 'FLK'; }
	if (countrycode == 'FJ') { return 'FJI'; }
	if (countrycode == 'FI') { return 'FIN'; }
	if (countrycode == 'FR') { return 'FRA'; }
	if (countrycode == 'GF') { return 'GUF'; }
	if (countrycode == 'PF') { return 'PYF'; }
	if (countrycode == 'TF') { return 'ATF'; }
	if (countrycode == 'GA') { return 'GAB'; }
	if (countrycode == 'GM') { return 'GMB'; }
	if (countrycode == 'GE') { return 'GEO'; }
	if (countrycode == 'DE') { return 'DEU'; }
	if (countrycode == 'GH') { return 'GHA'; }
	if (countrycode == 'GI') { return 'GIB'; }
	if (countrycode == 'GR') { return 'GRC'; }
	if (countrycode == 'GL') { return 'GRL'; }
	if (countrycode == 'GD') { return 'GRD'; }
	if (countrycode == 'GP') { return 'GLP'; }
	if (countrycode == 'GU') { return 'GUM'; }
	if (countrycode == 'GT') { return 'GTM'; }
	if (countrycode == 'GG') { return 'GGY'; }
	if (countrycode == 'GN') { return 'GIN'; }
	if (countrycode == 'GW') { return 'GNB'; }
	if (countrycode == 'GY') { return 'GUY'; }
	if (countrycode == 'HT') { return 'HTI'; }
	if (countrycode == 'VA') { return 'VAT'; }
	if (countrycode == 'HN') { return 'HND'; }
	if (countrycode == 'HK') { return 'HKG'; }
	if (countrycode == 'HU') { return 'HUN'; }
	if (countrycode == 'IS') { return 'ISL'; }
	if (countrycode == 'IN') { return 'IND'; }
	if (countrycode == 'ID') { return 'IDN'; }
	if (countrycode == 'IR') { return 'IRN'; }
	if (countrycode == 'IQ') { return 'IRQ'; }
	if (countrycode == 'IE') { return 'IRL'; }
	if (countrycode == 'IM') { return 'IMN'; }
	if (countrycode == 'IL') { return 'ISR'; }
	if (countrycode == 'IT') { return 'ITA'; }
	if (countrycode == 'CI') { return 'CIV'; }
	if (countrycode == 'JM') { return 'JAM'; }
	if (countrycode == 'JP') { return 'JPN'; }
	if (countrycode == 'JE') { return 'JEY'; }
	if (countrycode == 'JO') { return 'JOR'; }
	if (countrycode == 'KZ') { return 'KAZ'; }
	if (countrycode == 'KE') { return 'KEN'; }
	if (countrycode == 'KI') { return 'KIR'; }
	if (countrycode == 'KO') { return 'KOS'; }
	if (countrycode == 'KW') { return 'KWT'; }
	if (countrycode == 'KG') { return 'KGZ'; }
	if (countrycode == 'LA') { return 'LAO'; }
	if (countrycode == 'LV') { return 'LVA'; }
	if (countrycode == 'LB') { return 'LBN'; }
	if (countrycode == 'LS') { return 'LSO'; }
	if (countrycode == 'LR') { return 'LBR'; }
	if (countrycode == 'LY') { return 'LBY'; }
	if (countrycode == 'LI') { return 'LIE'; }
	if (countrycode == 'LT') { return 'LTU'; }
	if (countrycode == 'LU') { return 'LUX'; }
	if (countrycode == 'MO') { return 'MAC'; }
	if (countrycode == 'MK') { return 'MKD'; }
	if (countrycode == 'MG') { return 'MDG'; }
	if (countrycode == 'MW') { return 'MWI'; }
	if (countrycode == 'MY') { return 'MYS'; }
	if (countrycode == 'MV') { return 'MDV'; }
	if (countrycode == 'ML') { return 'MLI'; }
	if (countrycode == 'MT') { return 'MLT'; }
	if (countrycode == 'MH') { return 'MHL'; }
	if (countrycode == 'MQ') { return 'MTQ'; }
	if (countrycode == 'MR') { return 'MRT'; }
	if (countrycode == 'MU') { return 'MUS'; }
	if (countrycode == 'YT') { return 'MYT'; }
	if (countrycode == 'MX') { return 'MEX'; }
	if (countrycode == 'FS') { return 'FSM'; }
	if (countrycode == 'MD') { return 'MDA'; }
	if (countrycode == 'MC') { return 'MCO'; }
	if (countrycode == 'MN') { return 'MNG'; }
	if (countrycode == 'ME') { return 'MNE'; }
	if (countrycode == 'MS') { return 'MSR'; }
	if (countrycode == 'MA') { return 'MAR'; }
	if (countrycode == 'MZ') { return 'MOZ'; }
	if (countrycode == 'MM') { return 'MMR'; }
	if (countrycode == 'NA') { return 'NAM'; }
	if (countrycode == 'NR') { return 'NRU'; }
	if (countrycode == 'NP') { return 'NPL'; }
	if (countrycode == 'AN') { return 'ANT'; }
	if (countrycode == 'NL') { return 'NLD'; }
	if (countrycode == 'NC') { return 'NCL'; }
	if (countrycode == 'NZ') { return 'NZL'; }
	if (countrycode == 'NI') { return 'NIC'; }
	if (countrycode == 'NE') { return 'NER'; }
	if (countrycode == 'NG') { return 'NGA'; }
	if (countrycode == 'NU') { return 'NIU'; }
	if (countrycode == 'NF') { return 'NFK'; }
	if (countrycode == 'KP') { return 'PRK'; }
	if (countrycode == 'MP') { return 'MNP'; }
	if (countrycode == 'NO') { return 'NOR'; }
	if (countrycode == 'OM') { return 'OMN'; }
	if (countrycode == 'PK') { return 'PAK'; }
	if (countrycode == 'PW') { return 'PLW'; }
	if (countrycode == 'PS') { return 'PSE'; }
	if (countrycode == 'PA') { return 'PAN'; }
	if (countrycode == 'PG') { return 'PNG'; }
	if (countrycode == 'PY') { return 'PRY'; }
	if (countrycode == 'PE') { return 'PER'; }
	if (countrycode == 'PH') { return 'PHL'; }
	if (countrycode == 'PN') { return 'PCN'; }
	if (countrycode == 'PL') { return 'POL'; }
	if (countrycode == 'PT') { return 'PRT'; }
	if (countrycode == 'PR') { return 'PRI'; }
	if (countrycode == 'QA') { return 'QAT'; }
	if (countrycode == 'RO') { return 'ROU'; }
	if (countrycode == 'RU') { return 'RUS'; }
	if (countrycode == 'RW') { return 'RWA'; }
	if (countrycode == 'RE') { return 'REU'; }
	if (countrycode == 'BQ') { return 'BES'; }
	if (countrycode == 'BL') { return 'BLM'; }
	if (countrycode == 'KN') { return 'KNA'; }
	if (countrycode == 'SH') { return 'SHN'; }
	if (countrycode == 'LC') { return 'LCA'; }
	if (countrycode == 'MF') { return 'MAF'; }
	if (countrycode == 'PM') { return 'SPM'; }
	if (countrycode == 'VC') { return 'VCT'; }
	if (countrycode == 'WS') { return 'WSM'; }
	if (countrycode == 'SM') { return 'SMR'; }
	if (countrycode == 'ST') { return 'STP'; }
	if (countrycode == 'SA') { return 'SAU'; }
	if (countrycode == 'SN') { return 'SEN'; }
	if (countrycode == 'RS') { return 'SRB'; }
	if (countrycode == 'SC') { return 'SYC'; }
	if (countrycode == 'SL') { return 'SLE'; }
	if (countrycode == 'SG') { return 'SGP'; }
	if (countrycode == 'BQ') { return 'BES'; }
	if (countrycode == 'SX') { return 'SXM'; }
	if (countrycode == 'SK') { return 'SVK'; }
	if (countrycode == 'SI') { return 'SVN'; }
	if (countrycode == 'SB') { return 'SLB'; }
	if (countrycode == 'SO') { return 'SOM'; }
	if (countrycode == 'SO') { return 'SOM'; }
	if (countrycode == 'ZA') { return 'ZAF'; }
	if (countrycode == 'GS') { return 'SGS'; }
	if (countrycode == 'KR') { return 'KOR'; }
	if (countrycode == 'SS') { return 'SSD'; }
	if (countrycode == 'ES') { return 'ESP'; }
	if (countrycode == 'LK') { return 'LKA'; }
	if (countrycode == 'SD') { return 'SDN'; }
	if (countrycode == 'SR') { return 'SUR'; }
	if (countrycode == 'SZ') { return 'SWZ'; }
	if (countrycode == 'SE') { return 'SWE'; }
	if (countrycode == 'CH') { return 'CHE'; }
	if (countrycode == 'SY') { return 'SYR'; }
	if (countrycode == 'TW') { return 'TWN'; }
	if (countrycode == 'TJ') { return 'TJK'; }
	if (countrycode == 'TZ') { return 'TZA'; }
	if (countrycode == 'TH') { return 'THA'; }
	if (countrycode == 'TG') { return 'TGO'; }
	if (countrycode == 'TK') { return 'TKL'; }
	if (countrycode == 'TO') { return 'TON'; }
	if (countrycode == 'TT') { return 'TTO'; }
	if (countrycode == 'TN') { return 'TUN'; }
	if (countrycode == 'TR') { return 'TUR'; }
	if (countrycode == 'TM') { return 'TKM'; }
	if (countrycode == 'TC') { return 'TCA'; }
	if (countrycode == 'TV') { return 'TUV'; }
	if (countrycode == 'UG') { return 'UGA'; }
	if (countrycode == 'UA') { return 'UKR'; }
	if (countrycode == 'AE') { return 'ARE'; }
	if (countrycode == 'GB') { return 'GBR'; }
	if (countrycode == 'US') { return 'USA'; }
	if (countrycode == 'VI') { return 'VIR'; }
	if (countrycode == 'UY') { return 'URY'; }
	if (countrycode == 'UZ') { return 'UZB'; }
	if (countrycode == 'VU') { return 'VUT'; }
	if (countrycode == 'VE') { return 'VEN'; }
	if (countrycode == 'VN') { return 'VNM'; }
	if (countrycode == 'WF') { return 'WLF'; }
	if (countrycode == 'EH') { return 'ESH'; }
	if (countrycode == 'YE') { return 'YEM'; }
	if (countrycode == 'ZM') { return 'ZMB'; }
	if (countrycode == 'ZW') { return 'ZWE'; }
    return null;
  	},

  convertCountryCode: function(countrycode) {
    if (countrycode == 'AF') { return 'Afghanistan'; }
    if (countrycode == 'AX') { return 'Aland Islands'; }
    if (countrycode == 'AL') { return 'Albania'; }
    if (countrycode == 'DZ') { return 'Algeria'; }
    if (countrycode == 'AS') { return 'American Samoa'; }
    if (countrycode == 'AD') { return 'Andorra'; }
    if (countrycode == 'AO') { return 'Angola'; }
    if (countrycode == 'AI') { return 'Anguilla'; }
    if (countrycode == 'AQ') { return 'Antarctica'; }
    if (countrycode == 'AG') { return 'Antigua and Barbuda'; }
    if (countrycode == 'AR') { return 'Argentina'; }
    if (countrycode == 'AM') { return 'Armenia'; }
    if (countrycode == 'AW') { return 'Aruba'; }
    if (countrycode == 'AU') { return 'Australia'; }
    if (countrycode == 'AT') { return 'Austria'; }
    if (countrycode == 'AZ') { return 'Azerbaijan'; }
    if (countrycode == 'BS') { return 'Bahamas'; }
    if (countrycode == 'BH') { return 'Bahrain'; }
    if (countrycode == 'BD') { return 'Bangladesh'; }
    if (countrycode == 'BB') { return 'Barbados'; }
    if (countrycode == 'BY') { return 'Belarus'; }
    if (countrycode == 'BE') { return 'Belgium'; }
    if (countrycode == 'BZ') { return 'Belize'; }
    if (countrycode == 'BJ') { return 'Benin'; }
    if (countrycode == 'BM') { return 'Bermuda'; }
    if (countrycode == 'BT') { return 'Bhutan'; }
    if (countrycode == 'BO') { return 'Bolivia'; }
    if (countrycode == 'BQ') { return 'Bonaire, Sint Eustatius and Saba'; }
    if (countrycode == 'BA') { return 'Bosnia and Herzegovina'; }
    if (countrycode == 'BW') { return 'Botswana'; }
    if (countrycode == 'BV') { return 'Bouvet Island'; }
    if (countrycode == 'BR') { return 'Brazil'; }
    if (countrycode == 'IO') { return 'British Indian Ocean Territory'; }
    if (countrycode == 'BN') { return 'Brunei Darussalam'; }
    if (countrycode == 'BG') { return 'Bulgaria'; }
    if (countrycode == 'BF') { return 'Burkina Faso'; }
    if (countrycode == 'BI') { return 'Burundi'; }
    if (countrycode == 'KH') { return 'Cambodia'; }
    if (countrycode == 'CM') { return 'Cameroon'; }
    if (countrycode == 'CA') { return 'Canada'; }
    if (countrycode == 'CV') { return 'Cabo Verde'; }
    if (countrycode == 'KY') { return 'Cayman Islands'; }
    if (countrycode == 'CF') { return 'Central African Republic'; }
    if (countrycode == 'TD') { return 'Chad'; }
    if (countrycode == 'CL') { return 'Chile'; }
    if (countrycode == 'CN') { return 'China'; }
    if (countrycode == 'CX') { return 'Christmas Island'; }
    if (countrycode == 'CC') { return 'Cocos (Keeling) Islands'; }
    if (countrycode == 'CO') { return 'Colombia'; }
    if (countrycode == 'KM') { return 'Comoros'; }
    if (countrycode == 'CG') { return 'Congo'; }
    if (countrycode == 'CD') { return 'Congo (Democratic Republic of the)'; }
    if (countrycode == 'CK') { return 'Cook Islands'; }
    if (countrycode == 'CR') { return 'Costa Rica'; }
    if (countrycode == 'CI') { return 'Cote d&apos;Ivoire'; }
    if (countrycode == 'HR') { return 'Croatia'; }
    if (countrycode == 'CU') { return 'Cuba'; }
    if (countrycode == 'CW') { return 'Curacao'; }
    if (countrycode == 'CY') { return 'Cyprus'; }
    if (countrycode == 'CZ') { return 'Czech Republic'; }
    if (countrycode == 'DK') { return 'Denmark'; }
    if (countrycode == 'DJ') { return 'Djibouti'; }
    if (countrycode == 'DM') { return 'Dominica'; }
    if (countrycode == 'DO') { return 'Dominican Republic'; }
    if (countrycode == 'EC') { return 'Ecuador'; }
    if (countrycode == 'EG') { return 'Egypt'; }
    if (countrycode == 'SV') { return 'El Salvador'; }
    if (countrycode == 'GQ') { return 'Equatorial Guinea'; }
    if (countrycode == 'ER') { return 'Eritrea'; }
    if (countrycode == 'EE') { return 'Estonia'; }
    if (countrycode == 'ET') { return 'Ethiopia'; }
    if (countrycode == 'FK') { return 'Falkland Islands (Malvinas)'; }
    if (countrycode == 'FO') { return 'Faroe Islands'; }
    if (countrycode == 'FJ') { return 'Fiji'; }
    if (countrycode == 'FI') { return 'Finland'; }
    if (countrycode == 'FR') { return 'France'; }
    if (countrycode == 'GF') { return 'French Guiana'; }
    if (countrycode == 'PF') { return 'French Polynesia'; }
    if (countrycode == 'TF') { return 'French Southern Territories'; }
    if (countrycode == 'GA') { return 'Gabon'; }
    if (countrycode == 'GM') { return 'Gambia'; }
    if (countrycode == 'GE') { return 'Georgia'; }
    if (countrycode == 'DE') { return 'Germany'; }
    if (countrycode == 'GH') { return 'Ghana'; }
    if (countrycode == 'GI') { return 'Gibraltar'; }
    if (countrycode == 'GR') { return 'Greece'; }
    if (countrycode == 'GL') { return 'Greenland'; }
    if (countrycode == 'GD') { return 'Grenada'; }
    if (countrycode == 'GP') { return 'Guadeloupe'; }
    if (countrycode == 'GU') { return 'Guam'; }
    if (countrycode == 'GT') { return 'Guatemala'; }
    if (countrycode == 'GG') { return 'Guernsey'; }
    if (countrycode == 'GN') { return 'Guinea'; }
    if (countrycode == 'GW') { return 'Guinea-Bissau'; }
    if (countrycode == 'GY') { return 'Guyana'; }
    if (countrycode == 'HT') { return 'Haiti'; }
    if (countrycode == 'HM') { return 'Heard Island and McDonald Islands'; }
    if (countrycode == 'VA') { return 'Holy See'; }
    if (countrycode == 'HN') { return 'Honduras'; }
    if (countrycode == 'HK') { return 'Hong Kong'; }
    if (countrycode == 'HU') { return 'Hungary'; }
    if (countrycode == 'IS') { return 'Iceland'; }
    if (countrycode == 'IN') { return 'India'; }
    if (countrycode == 'ID') { return 'Indonesia'; }
    if (countrycode == 'IR') { return 'Iran'; }
    if (countrycode == 'IQ') { return 'Iraq'; }
    if (countrycode == 'IE') { return 'Ireland'; }
    if (countrycode == 'IM') { return 'Isle of Man'; }
    if (countrycode == 'IL') { return 'Israel'; }
    if (countrycode == 'IT') { return 'Italy'; }
    if (countrycode == 'JM') { return 'Jamaica'; }
    if (countrycode == 'JP') { return 'Japan'; }
    if (countrycode == 'JE') { return 'Jersey'; }
    if (countrycode == 'JO') { return 'Jordan'; }
    if (countrycode == 'KZ') { return 'Kazakhstan'; }
    if (countrycode == 'KE') { return 'Kenya'; }
    if (countrycode == 'KI') { return 'Kiribati'; }
    if (countrycode == 'KP') { return 'Democratic People&apos;s Republic of Korea'; }
    if (countrycode == 'KR') { return 'Republic of Korea'; }
    if (countrycode == 'KW') { return 'Kuwait'; }
    if (countrycode == 'KG') { return 'Kyrgyzstan'; }
    if (countrycode == 'LA') { return 'Lao People&apos;s Democratic Republic'; }
    if (countrycode == 'LV') { return 'Latvia'; }
    if (countrycode == 'LB') { return 'Lebanon'; }
    if (countrycode == 'LS') { return 'Lesotho'; }
    if (countrycode == 'LR') { return 'Liberia'; }
    if (countrycode == 'LY') { return 'Libya'; }
    if (countrycode == 'LI') { return 'Liechtenstein'; }
    if (countrycode == 'LT') { return 'Lithuania'; }
    if (countrycode == 'LU') { return 'Luxembourg'; }
    if (countrycode == 'MO') { return 'Macao'; }
    if (countrycode == 'MK') { return 'Macedonia (Former Yugoslav Republic)'; }
    if (countrycode == 'MG') { return 'Madagascar'; }
    if (countrycode == 'MW') { return 'Malawi'; }
    if (countrycode == 'MY') { return 'Malaysia'; }
    if (countrycode == 'MV') { return 'Maldives'; }
    if (countrycode == 'ML') { return 'Mali'; }
    if (countrycode == 'MT') { return 'Malta'; }
    if (countrycode == 'MH') { return 'Marshall Islands'; }
    if (countrycode == 'MQ') { return 'Martinique'; }
    if (countrycode == 'MR') { return 'Mauritania'; }
    if (countrycode == 'MU') { return 'Mauritius'; }
    if (countrycode == 'YT') { return 'Mayotte'; }
    if (countrycode == 'MX') { return 'Mexico'; }
    if (countrycode == 'FM') { return 'Federated States of Micronesia'; }
    if (countrycode == 'MD') { return 'Moldova (Republic of)'; }
    if (countrycode == 'MC') { return 'Monaco'; }
    if (countrycode == 'MN') { return 'Mongolia'; }
    if (countrycode == 'ME') { return 'Montenegro'; }
    if (countrycode == 'MS') { return 'Montserrat'; }
    if (countrycode == 'MA') { return 'Morocco'; }
    if (countrycode == 'MZ') { return 'Mozambique'; }
    if (countrycode == 'MM') { return 'Myanmar'; }
    if (countrycode == 'NA') { return 'Namibia'; }
    if (countrycode == 'NR') { return 'Nauru'; }
    if (countrycode == 'NP') { return 'Nepal'; }
    if (countrycode == 'NL') { return 'Netherlands'; }
    if (countrycode == 'NC') { return 'New Caledonia'; }
    if (countrycode == 'NZ') { return 'New Zealand'; }
    if (countrycode == 'NI') { return 'Nicaragua'; }
    if (countrycode == 'NE') { return 'Niger'; }
    if (countrycode == 'NG') { return 'Nigeria'; }
    if (countrycode == 'NU') { return 'Niue'; }
    if (countrycode == 'NF') { return 'Norfolk Island'; }
    if (countrycode == 'MP') { return 'Northern Mariana Islands'; }
    if (countrycode == 'NO') { return 'Norway'; }
    if (countrycode == 'OM') { return 'Oman'; }
    if (countrycode == 'PK') { return 'Pakistan'; }
    if (countrycode == 'PW') { return 'Palau'; }
    if (countrycode == 'PS') { return 'Palestine'; }
    if (countrycode == 'PA') { return 'Panama'; }
    if (countrycode == 'PG') { return 'Papua New Guinea'; }
    if (countrycode == 'PY') { return 'Paraguay'; }
    if (countrycode == 'PE') { return 'Peru'; }
    if (countrycode == 'PH') { return 'Philippines'; }
    if (countrycode == 'PN') { return 'Pitcairn'; }
    if (countrycode == 'PL') { return 'Poland'; }
    if (countrycode == 'PT') { return 'Portugal'; }
    if (countrycode == 'PR') { return 'Puerto Rico'; }
    if (countrycode == 'QA') { return 'Qatar'; }
    if (countrycode == 'RE') { return 'Reunion'; }
    if (countrycode == 'RO') { return 'Romania'; }
    if (countrycode == 'RU') { return 'Russian Federation'; }
    if (countrycode == 'RW') { return 'Rwanda'; }
    if (countrycode == 'BL') { return 'Saint Barthelemy'; }
    if (countrycode == 'SH') { return 'Saint Helena, Ascension and Tristan da Cunha'; }
    if (countrycode == 'KN') { return 'Saint Kitts and Nevis'; }
    if (countrycode == 'LC') { return 'Saint Lucia'; }
    if (countrycode == 'MF') { return 'Saint Martin (French part)'; }
    if (countrycode == 'PM') { return 'Saint Pierre and Miquelon'; }
    if (countrycode == 'VC') { return 'Saint Vincent and the Grenadines'; }
    if (countrycode == 'WS') { return 'Samoa'; }
    if (countrycode == 'SM') { return 'San Marino'; }
    if (countrycode == 'ST') { return 'Sao Tome and Principe'; }
    if (countrycode == 'SA') { return 'Saudi Arabia'; }
    if (countrycode == 'SN') { return 'Senegal'; }
    if (countrycode == 'RS') { return 'Serbia'; }
    if (countrycode == 'SC') { return 'Seychelles'; }
    if (countrycode == 'SL') { return 'Sierra Leone'; }
    if (countrycode == 'SG') { return 'Singapore'; }
    if (countrycode == 'SX') { return 'Sint Maarten (Dutch part)'; }
    if (countrycode == 'SK') { return 'Slovakia'; }
    if (countrycode == 'SI') { return 'Slovenia'; }
    if (countrycode == 'SB') { return 'Solomon Islands'; }
    if (countrycode == 'SO') { return 'Somalia'; }
    if (countrycode == 'ZA') { return 'South Africa'; }
    if (countrycode == 'GS') { return 'South Georgia and the South Sandwich Islands'; }
    if (countrycode == 'SS') { return 'South Sudan'; }
    if (countrycode == 'ES') { return 'Spain'; }
    if (countrycode == 'LK') { return 'Sri Lanka'; }
    if (countrycode == 'SD') { return 'Sudan'; }
    if (countrycode == 'SR') { return 'Suriname'; }
    if (countrycode == 'SJ') { return 'Svalbard and Jan Mayen'; }
    if (countrycode == 'SZ') { return 'Swaziland'; }
    if (countrycode == 'SE') { return 'Sweden'; }
    if (countrycode == 'CH') { return 'Switzerland'; }
    if (countrycode == 'SY') { return 'Syrian Arab Republic'; }
    if (countrycode == 'TW') { return 'Taiwan'; }
    if (countrycode == 'TJ') { return 'Tajikistan'; }
    if (countrycode == 'TZ') { return 'Tanzania'; }
    if (countrycode == 'TH') { return 'Thailand'; }
    if (countrycode == 'TL') { return 'Timor-Leste'; }
    if (countrycode == 'TG') { return 'Togo'; }
    if (countrycode == 'TK') { return 'Tokelau'; }
    if (countrycode == 'TO') { return 'Tonga'; }
    if (countrycode == 'TT') { return 'Trinidad and Tobago'; }
    if (countrycode == 'TN') { return 'Tunisia'; }
    if (countrycode == 'TR') { return 'Turkey'; }
    if (countrycode == 'TM') { return 'Turkmenistan'; }
    if (countrycode == 'TC') { return 'Turks and Caicos Islands'; }
    if (countrycode == 'TV') { return 'Tuvalu'; }
    if (countrycode == 'UG') { return 'Uganda'; }
    if (countrycode == 'UA') { return 'Ukraine'; }
    if (countrycode == 'AE') { return 'United Arab Emirates'; }
    if (countrycode == 'GB') { return 'United Kingdom'; }
    if (countrycode == 'UK') { return 'United Kingdom'; }
    if (countrycode == 'US') { return 'USA'; }
    if (countrycode == 'UM') { return 'United States Minor Outlying Islands'; }
    if (countrycode == 'UY') { return 'Uruguay'; }
    if (countrycode == 'UZ') { return 'Uzbekistan'; }
    if (countrycode == 'VU') { return 'Vanuatu'; }
    if (countrycode == 'VE') { return 'Venezuela'; }
    if (countrycode == 'VN') { return 'Viet Nam'; }
    if (countrycode == 'VG') { return 'Virgin Islands (British)'; }
    if (countrycode == 'VI') { return 'Virgin Islands (U.S.)'; }
    if (countrycode == 'WF') { return 'Wallis and Futuna'; }
    if (countrycode == 'EH') { return 'Western Sahara'; }
    if (countrycode == 'YE') { return 'Yemen'; }
    if (countrycode == 'ZM') { return 'Zambia'; }
    if (countrycode == 'ZW') { return 'Zimbabwe'; }
    return 'Unknown';
  }

});

// panel/js/cx_panel.js

var CxPanel = CxExtension.extend({
  initialize: function(browser) {
    CxExtension.prototype.initialize.apply(this, browser);

    this.requestActiveTab();
    this.requestOpenTabs();
  },

  requestActiveTab: function() {
    message.send({ activeTab: true });
  },

  requestOpenTabs: function() {
    message.send({ allTabs: true });
  },

  receiveActiveTab: function(url) {
    var entry = this.getLogEntryForUrl(url);

    if (!entry) {
      this.set({ currentEntry: '' });
      return;
    } else {
      this.set({ currentEntry: entry });
    }
  },

  receiveOpenTabs: function(urls) {
    this.set({ openTabs: urls });
    this.getOpenTabEntries();
  },

  getOpenTabEntries: function() {
    var tabs = this.get('openTabs');

    if (!_.isEmpty(tabs)) {
      var entries = [];
      _.each(tabs, _.bind(function(tabUrl) {
        var logEntry = this.getLogEntryForUrl(tabUrl);
        if (logEntry && logEntry !== -Infinity) {
          entries.push(logEntry);
        }
      }, this));
      this.set({ openTabEntries: entries });
      this.setUpOpenTabsCitizenship();
    } else {
      this.set({ openTabEntries: [] });
    }
  },

  setUpOpenTabsCitizenship: function() {
    var tabEntries = this.get('openTabEntries');
    var validEntries = _.reject(tabEntries, function(entry) {
      return entry.countryCode === undefined || entry.countryCode === '';
    });
    var countryCodes = _.countBy(validEntries, function(entry) {
      return entry.countryCode;
    });
    var openTabsCitizenship = this.calculatePercentages(countryCodes);
    this.set({ openTabsCitizenship: openTabsCitizenship });
  },

  open: function() {
    this.set({ open: true });
  },

  close: function() {
    this.set({ open: false });
  },

  toggle: function() {
    if (this.get('open')) {
      this.close();
    } else {
      this.open();
    }
  },

  resetValues: function() {
    this.set({ open: false });

    this.set({ currentEntry: '' });
    this.set({ openTabEntries: [] });
    this.set({ openTabsCitizenship: [] });

    CxExtension.prototype.resetValues.apply(this);
  },

  eraseData: function() {
    this.resetValues();
  }

});



// panel/js/cx_panel_view.js

var CxPanelView = Backbone.View.extend({
  tagName: 'div',

  className: 'citizen-ex__pane',

  events: {
    'click .cex_erase': 'eraseData',
    'click .cex_close': 'close'
  },

  initialize: function(options) {
    this.template = _.template(options.template);

    this.listenTo(this.model, 'change:open', this.render);
    this.listenTo(this.model, 'change:currentEntry', this.render);
    this.listenTo(this.model, 'change:citizenship', this.render);
    this.listenTo(this.model, 'change:ownGeoData', this.render);
    this.listenTo(this.model, 'change:openTabsEntries', this.render);
    this.listenTo(this.model, 'change:openTabsCitizenship', this.render);

    this.appendToBody();
  },

  render: function() {
    if (this.model.get('open')) {
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.slideDown();
    } else {
      this.$el.slideUp();
    }
  },

  appendToBody: function() {
    var body = $('body');
    this.$el.appendTo(body);
  },

  close: function(event) {
    event.preventDefault();
    this.model.close();
  },

  eraseData: function(event) {
    event.preventDefault();
    this.model.eraseData();
  }

});


// panel/js/init_shared.js

var panelTemplate = "<div id=\"cex_hud\">\n\t<div id=\"cex_header\">\n\t\t<img id=\"cex_logo\" src=\"\" width=\"107\" height=\"24\" />\n\t\t<a href=\"#\" class=\"cex_more\" target=\"_blank\">More Data &amp; More Info &raquo;</a>\n        <a href=\"#\" class=\"cex_close\"><img id=\"cex_close\" src=\"\" width=\"24\" height=\"24\" /></a>\n\t\t<script type=\"text/javascript\">\n            if (!_.isUndefined(window.chrome)) {\n              $('#cex_header #cex_logo').attr('src',chrome.extension.getURL('images/logo-small-white.svg'));\n              $('#cex_header #cex_close').attr('src',chrome.extension.getURL('images/close.png'));\n              $('.cex_more').attr('href',chrome.extension.getURL('page/page.html'));\n\n            } else if (safari) {\n              $('#cex_header #cex_logo').attr('src',safari.extension.baseURI + 'images/logo-small-white.png');\n              $('#cex_header #cex_close').attr('src',safari.extension.baseURI + 'images/close.png');\n              $('#cex_header .cex_close').attr('href',safari.extension.baseURI + 'more_info.html');\n              $('.cex_more').attr('href',safari.extension.baseURI + 'page/page.html');\n            }\n\t\t</script>\n\t</div>\n\n\t<div id=\"cex_main\">\n\n\t<% if (currentEntry) { %>\n\n\t  \t<div id=\"cex_badge\">\n\n\t  \t\t<div id=\"cex_badge_column\">\n\n\t\t\t\t<% if (citizenship.length > 0) { %>\n\n\t\t\t\t<h2>This is your Algorithmic Citizenship</h2>\n\n\t\t\t\t<canvas id=\"cex_badge_canvas\"></canvas>\n\n\t\t\t\t<p id=\"cex_whatmeans\"><a href=\"http://citizen-ex.com/citizenship/\" target=\"_blank\">What does this mean?</a></p>\n\t\t\t\t<p id=\"cex_sharebuttons\">Share Via:<p>\n\t\t\t\t<p id=\"cex_sharebuttons\">\n\t\t\t\t\t<a href=\"#\" class=\"cex_share_facebook\">Facebook</a>&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t<a href=\"#\" class=\"cex_share_twitter\">Twitter</a>&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t<a href=\"#\" class=\"cex_share_email\">Email</a>&nbsp;&nbsp;&nbsp;\n\t\t\t\t</p>\n\n\t\t\t</div><!-- cex_badge_column -->\n\n\t\t\t<div id=\"cex_data_column\">\n\n\t\t\t\t<table id=\"distribution_table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"thead cex_country\">Your distribution</td>\n\t\t\t\t\t\t<td class=\"thead cex_percentage\">%</td>\n\t\t\t\t\t</tr>\n\t\t\t\t<% _.each(citizenship, function(country) { %>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"cex_country\"><%= cxPanel.convertCountryCode(country.code) %></td>\n\t\t\t\t\t\t<td class=\"cex_percentage\"><%= country.percentage %></td>\n\t\t\t\t\t</tr>\n\t\t\t\t<% }); %>\n\t\t\t\t</table>\n\n\t\t\t</div><!-- cex_data_column -->\n\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\tvar percents = [\n\t\t\t\t<% _.each(citizenship, function(country) { %>\n\t\t\t\t  [\"<%= country.code %>\",<%= country.percentage %>],\n\t\t\t\t  <% }); %>];\n\t\t\t\t\t// set canvas to css heights\n\t\t\t\t$('#cex_badge_canvas').attr('width', parseInt($('#cex_badge_canvas').css('width')));\n\t\t\t\t$('#cex_badge_canvas').attr('height', parseInt($('#cex_badge_canvas').css('height')));\n\n\t\t\t\tvar badge = $(\"#cex_badge_canvas\").get(0).getContext(\"2d\");\n\n\t\t\t\t// circle centre and radius\n\t\t\t\tvar x0 = $('#cex_badge_canvas').attr('width')/2;\n\t\t\t\tvar y0 = $('#cex_badge_canvas').attr('height')/2;\n\t\t\t\tvar r = Math.min($('#cex_badge_canvas').attr('height')/2,$('#cex_badge_canvas').attr('width')/2);\n\n\t\t\t\tvar circlepointer = 0;\n\n\t\t\t\t$.each(percents, function() {\n\t\t\t\t\tvar country = this[0];\n\t\t\t\t\tvar value = this[1];\n\t\t\t\t\tvar degrees = 360*(value/100);\n\t\t\t\t\tdrawSegment(badge,x0,y0,r,circlepointer,country,degrees);\n\t\t\t\t\tcirclepointer = circlepointer + degrees;\n\t\t\t\t\t});\n\n\t\t\t\tfunction drawSegment(badge,x0,y0,r,circlepointer,country,degrees) {\n\t\t\t\t\tvar img = new Image();\n\t\t\t\t\timg.onload = function() {\n\t\t\t\t\t\tvar flagscaledheight = badge.canvas.clientHeight;\n\t\t\t\t\t\tvar flagscaledwidth = flagscaledheight*(img.width/img.height);\n\t\t\t\t\t\tvar flagmargin = (flagscaledwidth - badge.canvas.clientWidth) / 2;\n\t\t\t\t\t\tvar svgCanvas = document.createElement(\"canvas\");\n\t\t\t\t    \tsvgCanvas.height = flagscaledheight;\n\t\t\t\t    \tsvgCanvas.width = flagscaledwidth;\n\t\t\t\t    \tvar svgCtx = svgCanvas.getContext(\"2d\");\n\t\t\t\t    \tsvgCtx.drawImage(img, -flagmargin, 0, flagscaledwidth, flagscaledheight);\n\t\t\t\t    \tvar pattern = badge.createPattern(svgCanvas, 'repeat');\n\t\t\t\t    \tbadge.fillStyle = pattern;\n\t\t\t\t\t\tbadge.beginPath();\n\t\t\t\t\t\tbadge.moveTo(x0, y0);\n\t\t\t\t\t\tvar xy = circleCoords(x0,y0,r,circlepointer);\n\t\t\t\t\t\tbadge.lineTo(xy[0],xy[1]);\n\t\t\t\t\t\tfor (i = 0; i < degrees; i=i+20) {\n\t\t\t\t\t\t\txy = circleCoords(x0,y0,r,circlepointer+i);\n\t\t\t\t\t\t\tbadge.lineTo(xy[0],xy[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\txy = circleCoords(x0,y0,r,circlepointer+degrees);\n\t\t\t\t\t\tbadge.lineTo(xy[0],xy[1]);\n\t\t\t\t\t\tbadge.closePath();\n\t\t\t\t\t\tbadge.lineWidth=1;\n\t\t\t\t\t\tbadge.strokeStyle=\"#888\";\n\t\t\t\t\t\tbadge.stroke();\n\t\t\t\t\t\tbadge.fill();\n\t\t\t\t      \t};\n                      if (!_.isUndefined(window.chrome)) {\n                        img.src = chrome.extension.getURL('flags/'+country+'.svg');\n                      } else if (safari) {\n                        img.src = safari.extension.baseURI + 'flags/'+country+'.png';\n                      }\n\t\t\t\t\t}\n\n\t\t\t\tfunction circleCoords(x0,y0,r,theta) {\n\t\t\t\t\tvar x = x0 + r * Math.cos(theta * Math.PI / 180);\n\t\t\t\t\tvar y = y0 + r * Math.sin(theta * Math.PI / 180);\n\t\t\t\t\treturn [x,y];\n\t\t\t\t\t}\n\n\t\t\t</script>\n\n\t\t</div><!-- cex_badge -->\n\n\t\t\t\t<% } else { %>\n\t\t\t\t  <h2>No Citizenship data available yet. Keep browsing!</h2>\n\t\t\t\t<% }; %>\n\n\t\t<div id=\"cex_map\">\n\n\t\t<div id=\"cex_map_window\" class=\"dark\">\n\t\t\t<img id=\"cex_map_loading\" src=\"\" alt=\"Loading\"/>\n\t\t\t<!-- Add mapbox watermark -->\n  \t\t\t<a href=\"http://mapbox.com/about/maps\" class='mapbox-maplogo' target=\"_blank\">MapBox</a>\n  \t\t</div>\n\n\t  \t<script type=\"text/javascript\">\n        if (!_.isUndefined(window.chrome)) {\n          $('img#cex_map_loading').attr('src',chrome.extension.getURL('images/loading.gif'));\n        } else if (safari) {\n          $('img#cex_map_loading').attr('src',safari.extension.baseURI + 'images/loading.gif');\n        }\n\t  \tsetTimeout(function(){ cex_drawMap(); }, 1000);\n\t  \tfunction cex_drawMap() {\n\t\t\tvar cexmap = L.map('cex_map_window', { zoomControl:false, maxZoom: 12 });\n\t\t\tvar cextilelayer = L.tileLayer('https://{s}.tiles.mapbox.com/v3/stml.l6086pbg/{z}/{x}/{y}.png', {\n\t\t\t\tattribution: '<a href=\"http://openstreetmap.org/copyright\">Map data: &copy; OpenStreetMap</a>'}).addTo(cexmap);\n\t\t\tcexmap.attributionControl.setPrefix(\"\");\n            var yellowMarker;\n            var cyanMarker;\n            var tabMarker;\n\n            if (!_.isUndefined(window.chrome)) {\n              cyanMarker = chrome.extension.getURL('images/map-pin-blue.png');\n              yellowMarker = chrome.extension.getURL('images/map-pin-yellow.png');\n              tabMarker = chrome.extension.getURL('images/map-marker-tab.png');\n            } else if (safari) {\n              cyanMarker = safari.extension.baseURI + 'images/map-pin-blue.png';\n              yellowMarker = safari.extension.baseURI + 'images/map-pin-yellow.png';\n              tabMarker = safari.extension.baseURI + 'images/map-marker-tab.png';\n            }\n\n\t\t\tvar destIcon = L.icon({\n\t\t\t\ticonUrl: yellowMarker,\n\t\t\t\ticonSize:     [41,41], // size of the icon\n\t\t\t\ticonAnchor:   [20,20], // point of the icon which will correspond to marker's location\n\t\t\t\t});\n\t\t\tvar origIcon = L.icon({\n\t\t\t\ticonUrl: cyanMarker,\n\t\t\t\ticonSize:     [41,41], // size of the icon\n\t\t\t\ticonAnchor:   [20,20], // point of the icon which will correspond to marker's location\n\t\t\t\t});\n\t\t\tvar tabIcon = L.icon({\n\t\t\t\ticonUrl: tabMarker,\n\t\t\t\ticonSize:     [9,9], // size of the icon\n\t\t\t\ticonAnchor:   [5,5], // point of the icon which will correspond to marker's location\n\t\t\t\t});\n\n/*\n            <% if (openTabEntries) { %>\n              <% _.each(openTabEntries, function(tabEntry) { %>\n                  <% if (tabEntry.url !== currentEntry.url) { %>\n                      var tabMarker = L.marker([<%= tabEntry.lat %>, <%= tabEntry.lng %>], {icon: tabIcon}).addTo(cexmap);\n                  <% } %>\n              <% }) %>\n            <% } %>\n*/\n\n\t\t\t// if we have location data\n\t\t\t<% if (ownGeoData.ownLat || currentEntry.lat) { %>\n\t\t\t\n\t\t\t\tvar cexmarkergroup = new L.featureGroup();\n\t\t\t\n\t\t\t\t// if we have a local location\n\t\t\t\t<% if (ownGeoData.ownLat) { %>\n\t\t\t\t\tvar origMarker = L.marker([<%= ownGeoData.ownLat %>, <%= ownGeoData.ownLng %>], {icon: origIcon}).addTo(cexmap);\n\t\t\t\t\tcexmarkergroup.addLayer(origMarker);\n\t\t\t\t\tvar isocode = '<%= cxPanel.convertIsoCode(ownGeoData.ownCountryCode) %>';\n\t\t\t\t\tif (!_.isUndefined(window.chrome)) {\n\t\t\t\t\t\tvar origOutline = chrome.extension.getURL('countriesjson/'+isocode+'.geo.json');\n\t\t\t\t\t} else if (safari) {\n                        var origOutline = safari.extension.baseURI + 'countriesjson/'+isocode+'.geo.json';\n                    }\n                    console.log(origOutline);\n                \tvar geojsonLayer = new L.GeoJSON.AJAX(origOutline);\n\t\t\t\t\tcexmarkergroup.addLayer(geojsonLayer);\n\t\t\t\t<% } %>\n\n\t\t\t\t// if we have a remote location \n\t\t\t\t<% if (currentEntry.lat) { %>\n\t\t\t\t\tvar destMarker = L.marker([<%= currentEntry.lat %>, <%= currentEntry.lng %>], {icon: destIcon}).addTo(cexmap);\n\t\t\t\t\tcexmarkergroup.addLayer(destMarker);\n\t\t\t\t<% } %>\n\t\t\t\t\n\t\t\t\t// if we have both a local and a remote location\n\t\t\t\t<% if (ownGeoData.ownLat && currentEntry.lat) { %>\n\t\t\t\t\tvar cexmarkerline = L.polyline([[<%= ownGeoData.ownLat %>, <%= ownGeoData.ownLng %>],[<%= currentEntry.lat %>, <%= currentEntry.lng %>]], { color: '#fff', weight: 1, opacity: 1 }).addTo(cexmap);\n\t\t\t\t<% } %>\n\t\t\t\t\n\t\t\t\tcexmap.fitBounds(cexmarkergroup.getBounds(), {padding: [50,50], maxZoom: 7});\n\t\t\t\t\t\t\t\n\t\t\t// else if we have no location data\n\t\t\t<% } else { %>\n\t\t\t\tcexmap.setView([0,0],2);\n\t\t\t<% } %>\n \n\t\t    // kill loading circle\n\t\t    $('img#cex_map_loading').hide();\n\t\t    }\n\n\t  \t</script>\n\n\t    \t\t<div id=\"cex_mapdata\">\n\n\t    \t\t\t<div id=\"cex_dest_column\">\n\t    \t\t\t\t<h3>Current remote location</h3>\n\t\t\t\t\t    <% if (currentEntry.ip) { %>\n\t\t\t\t\t      <p><strong><% if (currentEntry.city.length > 0) { %><%= currentEntry.city %>, <% } %><%= cxPanel.convertCountryCode(currentEntry.countryCode) %></strong></p>\n\t\t\t\t\t      <p>IP Address: <%= currentEntry.ip %></p>\n\t\t\t\t\t      <p>Lat: <%= currentEntry.lat %> / Lon: <%= currentEntry.lng %></p>\n\t\t\t\t\t    <% } else { %>\n\t\t\t\t\t      <p><strong>Remote location is unknown</strong></p>\n\t\t\t\t\t      <p>&nbsp;</p>\n\t\t\t\t\t      <p>&nbsp;</p>\n\t\t\t\t\t    <% }; %>\n\t\t\t\t    </div><!-- cex_dest_column -->\n\t\t\t\t    <div id=\"cex_orig_column\">\n\t    \t\t\t\t<h3>Your tracked location</h3>\n\t\t\t\t\t    <% if (ownGeoData && ownGeoData.ownIp) { %>\n\t\t\t\t\t      <p><strong><% if (ownGeoData.ownCity.length > 0) { %><%= ownGeoData.ownCity %>, <% } %><%= cxPanel.convertCountryCode(ownGeoData.ownCountryCode) %></strong></p>\n\t\t\t\t\t      <p>IP Address: <%= ownGeoData.ownIp %></p>\n\t\t\t\t\t      <p>Lat: <%= ownGeoData.ownLat %> / Lon: <%= ownGeoData.ownLng %></p>\n\t\t\t\t\t    <% } else { %>\n\t\t\t\t\t      <p><strong>Your location is unknown</strong></p>\n\t\t\t\t\t      <p>&nbsp;</p>\n\t\t\t\t\t      <p>&nbsp;</p>\n\t\t\t\t\t    <% }; %>\n\t\t\t\t    </div><!-- cex_orig_column -->\n\t\t\t\t</div><!-- cex_mapdata -->\n\n\t    </div><!-- cex_map -->\n\n\t  <% } else { %>\n\n\t  \t\t<div id=\"cex_nodata\">\n\t\t\t\t<p>No data available yet.</p>\n\t\t\t</div>\n\t  <% }; %>\n\n\t</div><!-- #cex_main -->\n\n</div><!-- #cex_hud -->\n";

var browser = new CxBrowser();
var storage = new CxStorage(browser);
var message = new CxMessage(browser);

var cxPanel;
var cxPanelView;

// panel/js/init_chrome.js

chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
  if (_.has(request, 'tabs')) {
    cxPanel.receiveOpenTabs(request.tabs);
  } else if (_.has(request, 'activeTab'))  {
    cxPanel.receiveActiveTab(request.activeTab);
  } else if (request.allLogEntries) {
    cxPanel.receiveAllLogEntries(request.allLogEntries);
  } else if (request.countryLog) {
    cxPanel.receiveCitizenship(request.countryLog);
  } else if (_.has(request, 'ownGeoData')) {
    cxPanel.receiveOwnGeoData(request.ownGeoData);
  }
});

cxPanel = new CxPanel(browser);
cxPanelView = new CxPanelView({ model: cxPanel, template: panelTemplate });
